---
# x-superset-image: &superset-image apache/superset:${TAG:-latest-dev}
# x-superset-depends-on: &superset-depends-on
#   - db
#   - redis
# x-superset-volumes: &superset-volumes
#   # /app/pythonpath_docker will be appended to the PYTHONPATH in the final container
#   - ./superset/docker:/app/docker
#   - superset_home:/app/superset_home
version: '2'

services:
# -----------------------------------------
  zookeeper:
    env_file:
      - .env
    image: ${ZOOKEEPER_IMAGE}
    ports:
      - ${ZOOKEEPER_PORTS}
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    container_name: sn-zookeeper
# -----------------------------------------
  kafkabroker:
    env_file:
    - .env
    image: ${KAFKA_IMAGE}
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA_PORTS}
    container_name: sn-kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafkabroker:${KAFKA_INTERNAL_PORT},PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:${KAFKA_INTERNAL_PORT},PLAINTEXT_HOST://0.0.0.0:9092
# -----------------------------------------
  kafdrop:
    env_file:
    - .env
    container_name: kafdrop
    image: ${KAFDROP_IMAGE}
    depends_on:
      - kafkabroker
    environment:
      KAFKA_BROKERCONNECT: kafkabroker:${KAFKA_INTERNAL_PORT}
    ports:
      - ${KAFDROP_PORTS}
# -----------------------------------------
  websocket:
    env_file:
    - .env
    container_name: websocket
    environment:
    - FINNHUB_API_KEY=${FINNHUB_API_KEY}
    build:
      context: ./python
      dockerfile: Dockerfile
    image: fin_websocket:tag
    restart: unless-stopped
    depends_on:
      - kafkabroker
      - kafdrop
      - init-kafka
    ports:
      - ${WEBSOCKET_PORTS}
# -----------------------------------------
  init-kafka:
    env_file:
    - .env
    container_name: init_kafka
    image: ${KAFKA_IMAGE}
    depends_on:
      - kafkabroker
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafkabroker:${KAFKA_INTERNAL_PORT} --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafkabroker:${KAFKA_INTERNAL_PORT} --create --if-not-exists --topic ${KAFKA_TOPIC_DEFAULT} --replication-factor ${REPLICATION_FACTOR_DEFAULT} --partitions ${PARTITIONS_DEFAULT}

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafkabroker:${KAFKA_INTERNAL_PORT} --list
      "
# -----------------------------------------
  pyspark:
    env_file:
    - .env
    container_name: pyspark
    build:
      context: ./spark
      dockerfile: Dockerfile
    image: fin_pyspark:tag
    restart: unless-stopped
    ports:
      - ${PYSPARK_CLIENT_PORTS}
    depends_on:
      - spark-master
      - cassandra
      - init-kafka
# -----------------------------------------
  cassandra:
    env_file:
    - .env
    container_name: cassandra
    ports:
      - ${CASSANDRA_PORTS}
    # command: |
    #   "
    #   /bin/sh -c cqlsh
    #   "
    build:
      context: ./cassandra
      dockerfile: Dockerfile
    image: fin_cassandra:tag
# -----------------------------------------  
  cassandra-webui:
    env_file:
    - .env
    image: ${CASSANDRA_WEBUI_IMAGE}
    environment:
      HOST_PORT: ":80"
      READ_ONLY: "false"
      CASSANDRA_HOST: cassandra
      CASSANDRA_PORT: 9042
      CASSANDRA_USERNAME: "cassandra"
      CASSANDRA_PASSWORD: "cassandra"
    depends_on:
      - cassandra
# -----------------------------------------  
  presto:
    env_file:
    - .env
    container_name: presto
    ports:
      - ${PRESTO_PORTS}
    build:
      context: ./presto
      dockerfile: Dockerfile
    image: fin_presto:tag
# -----------------------------------------  
  spark-master:
    env_file:
    - .env
    image: ${SPARK_IMAGE}
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    ports:
      - ${SPARK_MASTER_PORTS}
      - ${SPARK_MASTER_INTERNAL_PORTS}
# -----------------------------------------
  spark-worker:
    env_file:
    - .env
    image: ${SPARK_IMAGE}
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:${SPARK_MASTER_INTERNAL_PORT}
      - SPARK_WORKER_MEMORY=${SPARK_WORKER_MEMORY}
      - SPARK_WORKER_CORES=${SPARK_WORKER_CORES}
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    ports:
      - ${SPARK_WORKER_PORTS}
    depends_on:
      - spark-master
  redis:
    image: redis:7
    container_name: superset_cache
    restart: unless-stopped
    volumes:
      - redis:/data

  db:
    env_file: superset/docker/.env-non-dev
    image: postgres:14
    container_name: superset_db
    restart: unless-stopped
    volumes:
      - db_home:/var/lib/postgresql/data

  superset:
    env_file: superset/docker/.env-non-dev
    image: apache/superset:${TAG:-latest-dev}
    container_name: superset_app
    command: ["/app/docker/docker-bootstrap.sh", "app-gunicorn"]
    user: "root"
    restart: unless-stopped
    ports:
      - 8088:8088
    depends_on:
      - db
      - redis
    volumes:
      - ./superset/docker:/app/docker
      - superset_home:/app/superset_home

  superset-init:
    image: apache/superset:${TAG:-latest-dev}
    container_name: superset_init
    command: ["/app/docker/docker-init.sh"]
    env_file: superset/docker/.env-non-dev
    depends_on:
      - db
      - redis
    user: "root"
    volumes:
      - ./superset/docker:/app/docker
      - superset_home:/app/superset_home
    healthcheck:
      disable: true

  superset-worker:
    image: apache/superset:${TAG:-latest-dev}
    container_name: superset_worker
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    env_file: superset/docker/.env-non-dev
    restart: unless-stopped
    depends_on:
      - db
      - redis
    user: "root"
    volumes:
      - ./superset/docker:/app/docker
      - superset_home:/app/superset_home
    healthcheck:
      test: ["CMD-SHELL", "celery -A superset.tasks.celery_app:app inspect ping -d celery@$$HOSTNAME"]

  superset-worker-beat:
    image: apache/superset:${TAG:-latest-dev}
    container_name: superset_worker_beat
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    env_file: superset/docker/.env-non-dev
    restart: unless-stopped
    depends_on:
      - db
      - redis
    user: "root"
    volumes:
      - ./superset/docker:/app/docker
      - superset_home:/app/superset_home
    healthcheck:
      disable: true     
  # -----------------------------------------
  grafana:
    container_name: grafana
    ports:
    - 3000:3000
    build:
      context: ./grafana
      dockerfile: Dockerfile

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 10.6.0.0/24

volumes:
  superset_home:
    external: false
  db_home:
    external: false
  redis:
    external: false
