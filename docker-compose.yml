---
services:
# -----------------------------------------
  zookeeper:
    image: ${ZOOKEEPER_IMAGE}
    ports:
      - ${ZOOKEEPER_PORTS}
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    container_name: sn-zookeeper
# -----------------------------------------
  kafka:
    image: ${KAFKA_IMAGE}
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA_PORTS}
    container_name: sn-kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${KAFKA_INTERNAL_PORT},PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:${KAFKA_INTERNAL_PORT},PLAINTEXT_HOST://0.0.0.0:9092
# -----------------------------------------
  kafdrop:
    container_name: kafdrop
    image: ${KAFDROP_IMAGE}
    depends_on:
      - kafka
    environment:
      KAFKA_BROKERCONNECT: kafka:${KAFKA_INTERNAL_PORT}
    ports:
      - ${KAFDROP_PORTS}
# -----------------------------------------
  websocket:
    container_name: websocket
    environment:
    - FINNHUB_API_KEY=${FINNHUB_API_KEY}
    build:
      context: /python
      dockerfile: Dockerfile
    image: fin_websocket:tag
    depends_on:
      - kafka
      - kafdrop
      - init-kafka
    ports:
      - ${WEBSOCKET_PORTS}
# -----------------------------------------
  init-kafka:
    container_name: init_kafka
    image: ${KAFKA_IMAGE}
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:${KAFKA_INTERNAL_PORT} --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:${KAFKA_INTERNAL_PORT} --create --if-not-exists --topic ${KAFKA_TOPIC_DEFAULT} --replication-factor ${REPLICATION_FACTOR_DEFAULT} --partitions ${PARTITIONS_DEFAULT}

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:${KAFKA_INTERNAL_PORT} --list
      "
# -----------------------------------------
  pyspark:
    container_name: pyspark
    build:
      context: /spark
      dockerfile: Dockerfile
    image: fin_pyspark:tag
    ports:
      - ${PYSPARK_CLIENT_PORTS}
    depends_on:
      - spark-master
      - cassandra
      - init-kafka
# -----------------------------------------
  cassandra:
    container_name: cassandra
    ports:
      - ${CASSANDRA_PORTS}
    # command: |
    #   "
    #   /bin/sh -c cqlsh
    #   "
    build:
      context: /cassandra
      dockerfile: Dockerfile
    image: fin_cassandra:tag
# -----------------------------------------  
  cassandra-webui:
    image: ${CASSANDRA_WEBUI_IMAGE}
    environment:
      HOST_PORT: ":80"
      READ_ONLY: False
      CASSANDRA_HOST: cassandra
      CASSANDRA_PORT: 9042
      CASSANDRA_USERNAME: "cassandra"
      CASSANDRA_PASSWORD: "cassandra"
    depends_on:
      - cassandra
# -----------------------------------------  
  presto:
    container_name: presto
    ports:
      - ${PRESTO_PORTS}
    build:
      context: /presto
      dockerfile: Dockerfile
    image: fin_presto:tag
# -----------------------------------------  
  spark-master:
    image: ${SPARK_IMAGE}
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    ports:
      - ${SPARK_MASTER_PORTS}
      - ${SPARK_MASTER_INTERNAL_PORTS}
# -----------------------------------------
  spark-worker:
    image: ${SPARK_IMAGE}
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:${SPARK_MASTER_INTERNAL_PORT}
      - SPARK_WORKER_MEMORY=${SPARK_WORKER_MEMORY}
      - SPARK_WORKER_CORES=${SPARK_WORKER_CORES}
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    ports:
      - ${SPARK_WORKER_PORTS}
    depends_on:
      - spark-master

