---
services:
# -----------------------------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.1.0
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    container_name: sn-zookeeper
# -----------------------------------------
  kafka:
    image: confluentinc/cp-kafka:7.1.0
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    container_name: sn-kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
# -----------------------------------------
  kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop:latest
    depends_on:
      - kafka
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
    ports:
      - 9000:9000
# -----------------------------------------
  websocket:
    container_name: websocket
    build:
      context: /spark
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - kafdrop
    ports:
      - 8001:8001
# -----------------------------------------
  init-kafka:
    container_name: init_kafka
    image: confluentinc/cp-kafka:7.1.0
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic trades --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
# -----------------------------------------
  pyspark:
    container_name: pyspark
    build:
      context: /spark
      dockerfile: Dockerfile
      no_cache: true
    ports:
      - 9192:9192
# -----------------------------------------
  cassandra:
    container_name: cassandra
    ports:
      - 9042:9042
    # command: |
    #   "
    #   /bin/sh -c cqlsh
    #   "
    build:
      context: /cassandra
      dockerfile: Dockerfile

